# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: bip

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-jar-job:
    name: 'Build JAR'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: 'Get Version Number'
      run: | 
          echo "VERSION=$(./gradlew properties -q | grep "version:" | awk '{print $2}')" >> $GITHUB_ENV
    - name: 'Publish JAR'
      uses: actions/upload-artifact@v2
      with:
        name: 'bip-${{env.VERSION}}.jar'
        path: 'build/libs/*.jar'

    - name: 'Create Release'
      if: contains(github.ref, 'v')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        tag_name: ${{github.ref}}
        release_name: Release ${{github.ref}}
        body: |
          Initial release
        draft: false
        prerelease: false
    - name: 'Upload Release Asset'
      if: contains(github.ref, 'v')
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{steps.create_release.outputs.upload_url}}
        asset_path: bip-${{env.VERSION}}.jar
        asset_name: bip-${{env.VERSION}}.jar
        asset_content_type: application/java-archive
    - name: 'Write Upload URL To File'
      if: contains(github.ref, 'v')
      run: |
        echo "${{steps.create_release.outputs.upload_url}}" > upload_url.txt

    - name: 'Publish Upload URL'
      if: contains(github.ref, 'v')
      uses: actions/upload-artifact@v2
      with:
        name: 'upload_url.txt'
        path: 'upload_url.txt'
        
  build-macos-image:
    needs: [build-jar-job]
    name: 'Build macOS Image'
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: 'Setup GraalVM Environment'
        uses: DeLaGuardo/setup-graalvm@2.0
        with:
          graalvm-version: '20.2.0.java8'
      - name: 'Install Native Image Plugin'
        run: |
          gu install native-image
      - name: 'Get Version Number'
        run: |
          echo "VERSION=$(./gradlew properties -q | grep "version:" | awk '{print $2}')" >> $GITHUB_ENV
      - name: 'Get JAR Artifact'
        uses: actions/download-artifact@v2
        with:
          name: 'bip-${{env.VERSION}}.jar'
          path: ./build/libs
      - name: 'Get Release URL'
        if: contains(github.ref, 'v')
        uses: actions/download-artifact@v2
        with:
          name: 'upload_url.txt'
      - name: 'Get Upload URL'
        if: contains(github.ref, 'v')
        run: |
          echo "UPLOAD_URL=$(cat upload_url.txt)" >> $GITHUB_ENV
      - name: 'Move to /jar dir'
        run: cd build/libs    
      - name: 'Check the contents of target folder'
        run: ls
      - name: 'Build Mac OS Image'
        run: |
          native-image --no-server --no-fallback -jar bip-${{env.VERSION}}.jar
      - name: 'Publish Mac OS Image'
        if: success() && contains(github.ref, 'v')
        uses: actions/upload-artifact@v2
        with:
          name: 'bip-${{env.VERSION}}-macOS'
          path: 'bip-${{env.VERSION}}'
      - name: 'Upload Mac OS Image Asset'
        if: success()
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_name: 'bip-${{env.VERSION}}-macOS'
          asset_path: 'bip-${{env.VERSION}}'
          asset_content_type: application/octet-stream
          
  build-windows-image:
      needs: [build-jar-job]
      name: 'Build Windows Image'
      runs-on: windows-latest
      steps:
        - name: 'Checkout'
          uses: actions/checkout@v1
        - name: 'Download GraalVM'
          run: |
            Invoke-RestMethod -Uri https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-20.2.0/graalvm-ce-java8-windows-amd64-20.2.0.zip -OutFile 'graal.zip'
        - name: 'Install GraalVM'
          run: |
            Expand-Archive -path 'graal.zip' -destinationpath '.'
        - name: 'Install Native Image'
          run: |
            graalvm-ce-java8-20.2.0\bin\gu.cmd install native-image
        - name: 'Set up Visual C Build Tools Workload for Visual Studio 2017 Build Tools'
          run: |
            choco install visualstudio2017-workload-vctools
        - name: 'Get Version Number'
          run: |
            echo "VERSION=$(./gradlew properties -q | grep "version:" | awk '{print $2}')" >> $GITHUB_ENV
          shell: bash
        - name: 'Get JAR Artifact'
          uses: actions/download-artifact@v2
          with:
            name: 'bip-${{env.VERSION}}.jar'
            path: ./
      
        - name: 'Build Native Image'
          shell: cmd
          env:
            JAVA_HOME: ./graalvm-ce-java8-20.2.0
          run: |
            call "C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
            ./graalvm-ce-java8-20.2.0/bin/native-image --no-server --no-fallback -H:Name=bip-${{env.VERSION}} --allow-incomplete-classpath -jar bip-${{env.VERSION}}.jar
        - name: 'Get Release URL'
          if: contains(github.ref, 'v')
          uses: actions/download-artifact@v2
          with:
            name: 'upload_url.txt'
        - name: 'Get Upload URL'
          if: contains(github.ref, 'v')
          run: |
            echo "UPLOAD_URL=$(cat upload_url.txt)" >> $GITHUB_ENV
          shell: bash
        - name: 'Publish Windows Image'
          if: success()
          uses: actions/upload-artifact@v2
          with:
            name: 'bip-${{env.VERSION}}-windows.exe'
            path: 'bip-${{env.VERSION}}.exe'
        - name: 'Release Windows Image Asset'
          if: success() && contains(github.ref, 'v')
          id: upload-release-asset
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          with:
            upload_url: ${{env.UPLOAD_URL}}
            asset_name: 'bip-${{env.VERSION}}-windows.exe'
            asset_path: 'bip-${{env.VERSION}}.exe'
            asset_content_type: application/octet-stream
